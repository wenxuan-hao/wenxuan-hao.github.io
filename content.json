{"meta":{"title":"Sparkle","subtitle":"code and life","description":null,"author":"郝文璇","url":"https://wenxuan-hao.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-12-22T15:07:47.000Z","updated":"2019-12-22T15:20:07.025Z","comments":true,"path":"categories/index.html","permalink":"https://wenxuan-hao.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-12-22T15:06:02.000Z","updated":"2019-12-22T15:20:35.829Z","comments":true,"path":"tags/index.html","permalink":"https://wenxuan-hao.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"图片测试","slug":"图片测试","date":"2019-12-23T02:57:50.000Z","updated":"2019-12-23T03:22:55.685Z","comments":true,"path":"图片测试/","link":"","permalink":"https://wenxuan-hao.github.io/图片测试/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"断路器模式","slug":"断路器模式","date":"2019-12-22T15:34:05.000Z","updated":"2019-12-22T15:35:43.202Z","comments":true,"path":"断路器模式/","link":"","permalink":"https://wenxuan-hao.github.io/断路器模式/","excerpt":"","text":"介绍在分布式环境下，特别是微服务结构的分布式系统中， 一个软件系统调用另外一个远程系统是非常普遍的。这种远程调用的被调用方可能是另外一个进程，或者是跨网路的另外一台主机, 这种远程的调用和进程的内部调用最大的区别是，远程调用可能会失败，或者挂起而没有任何回应，直到超时。更坏的情况是， 如果有多个调用者对同一个挂起的服务进行调用，那么就很有可能的是一个服务的超时等待迅速蔓延到整个分布式系统，引起连锁反应， 从而消耗掉整个分布式系统大量资源。最终可能导致系统瘫痪。 断路器（Circuit Breaker）模式就是为了防止在分布式系统中出现这种瀑布似的连锁反应导致的灾难。 一旦某个电器出问题，为了防止灾难，电路的保险丝就会熔断。断路器类似于电路的保险丝， 实现思路非常简单，可以将需要保护的远程服务嗲用封装起来，在内部监听失败次数， 一旦失败次数达到某阀值后，所有后续对该服务的调用，断路器截获后都直接返回错误到调用方，而不会继续调用已经出问题的服务， 从而达到保护调用方的目的, 整个系统也就不会出现因为超时而产生的瀑布式连锁反应。 基本模式当supplier可用时, 断路器会直接返回调用结果给client端; 多次重试后达到重试阈值, 断路器会从close模式转为open模式, 再次调用相同的服务, 断路器会直接返回错误. 扩展模式基本的断路器模式下，保证了断路器在open状态时，保护supplier不会被调用， 但我们还需要额外的措施可以在supplier恢复服务后，可以重置断路器。一种可行的办法是断路器定期探测supplier的服务是否恢复， 一但恢复， 就将状态设置成close。断路器进行重试时的状态为半开（half-open）状态。 应用场景一个supplier一般很稳定，如果一旦故障发生后， 检查和恢复需要的时间比较长，通常无法短时间内快速修复的，那么这种服务比较适合采用断路器模式。否则很可能导致ping-pong效应。 不适用场景为了防止一个应用程序试图调用一个远程服务或访问共享资源，如果​​该操作是极有可能失败， 这种模式可能不适合。 对于处理中的应用程序访问本地专用资源，例如在存储器内数据结构。在这种环境下通常也不适合，使用断路器只会增加系统开销。 golang版实现","categories":[{"name":"设计模式","slug":"设计模式","permalink":"https://wenxuan-hao.github.io/categories/设计模式/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://wenxuan-hao.github.io/tags/设计模式/"}]}]}